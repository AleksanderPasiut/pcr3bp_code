///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Author: Aleksander M. Pasiut
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdexcept>
#include <carina/readable_scalar.hpp>
#include <carina/type_cast.hpp>
#include <tools/types.hpp>

namespace Ursa
{
namespace Pcr3bp
{

template<typename MapT>
class SetupParameters
{
public:
    using ScalarType = typename MapT::ScalarType;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //! @brief Constructor
    //!
    //! @param mu1 value of the mass located on the positive side of x axis
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    explicit SetupParameters(ScalarType mu1 = get_default_mu1())
        : m_mu1(mu1)
    {
        if (mu1 <= 0.0 || mu1 >= 1.0)
        {
            throw std::logic_error("mu1 value must be between 0.0 and 1.0!");
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //! @brief Get value \mu_i
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    constexpr ScalarType get_mu(size_t i) const
    {
        switch (i)
        {
            case 1: return m_mu1;
            case 2: return ScalarType(1.0) - m_mu1;
            default: throw std::logic_error("Unsupported i value!");
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //! @brief Get value x_i (coordinate of mass i)
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    constexpr ScalarType get_x(size_t i) const
    {
        switch (i)
        {
            case 1: return get_mu(2);
            case 2: return -get_mu(1);
            default: throw std::logic_error("Unsupported i value!");
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //! @brief Get default value of mass 1
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static ScalarType get_default_mu1()
    {
        return ScalarType(1.0) / ScalarType(82.0);
    }

private:
    ScalarType m_mu1;
};

}
}
